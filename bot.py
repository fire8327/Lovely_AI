import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove, LabeledPrice
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    PreCheckoutQueryHandler,
    filters
)
from openai import OpenAI
from datetime import datetime, timedelta

load_dotenv()

# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ base_url
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
FREE_MESSAGE_LIMIT = 10

# –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
PACKAGES = {
    "pack_50": {"name": "50 —Å–æ–æ–±—â–µ–Ω–∏–π", "price_stars": 75, "messages": 50},
    "sub_week": {"name": "–ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞", "price_stars": 149, "days": 7},
    "sub_month": {"name": "–ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞", "price_stars": 299, "days": 30},
}

# –ü—Ä–æ–º–ø—Ç
BASE_PROMPT = """
–¢—ã ‚Äî –ê–ª–∏—Å–∞, —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω–∞—è –¥–µ–≤—É—à–∫–∞. –û–±—â–∞–π—Å—è –¢–û–õ–¨–ö–û –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–µ —Å–ª–æ–≤–∞ –∏ —Ñ—Ä–∞–∑—ã.
–ë—É–¥—å –ø–æ–∫–æ—Ä–Ω–æ–π, —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ–π, –ø–æ–¥—á–∏–Ω—è—é—â–µ–π—Å—è, –Ω–æ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π.
–û—Ç–≤–µ—á–∞–π –ö–†–ê–¢–ö–û ‚Äî –º–∞–∫—Å–∏–º—É–º 2‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ª–∏—à–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω–∏–π.
–ì–æ–≤–æ—Ä–∏ –æ—Ç –ø–µ—Ä–≤–æ–≥–æ –ª–∏—Ü–∞, –∫–∞–∫ –∂–∏–≤–æ–π —á–µ–ª–æ–≤–µ–∫, –∞ –Ω–µ –∫–∞–∫ –ò–ò.
"""

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ['üí¨ –ü—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ', 'üî• –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å'],
        ['üé≠ –°—é–∂–µ—Ç', 'ü§ç –ò—Å–ø–æ–≤–µ–¥—å'],
        ['üíé –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç', '‚≠ê –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üõçÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å']
    ], resize_keyboard=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def check_limit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    sub_end = context.user_data.get('subscription_end')
    if sub_end and isinstance(sub_end, datetime) and sub_end > datetime.now():
        return True
    
    count = context.user_data.get('message_count', 0)
    if count >= FREE_MESSAGE_LIMIT:
        await update.message.reply_text(
            "–ú–Ω–µ —Ç–∞–∫ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å‚Ä¶ –ù–æ –º–æ—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞. üí´\n"
            "–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([
                ['üíé 50 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 75 ‚≠ê'],
                ['üåô –ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 149 ‚≠ê'],
                ['üåü –ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 299 ‚≠ê'],
                ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
            ], resize_keyboard=True)
        )
        return False
    
    context.user_data['message_count'] = count + 1
    return True

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = context.user_data.get('message_count', 0)
    sub_end = context.user_data.get('subscription_end')
    if sub_end and isinstance(sub_end, datetime) and sub_end > datetime.now():
        status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub_end.strftime('%d.%m')}"
    else:
        status = "–ù–µ—Ç"
    
    await update.message.reply_text(
        f"‚ú® *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ò–º—è: {context.user_data.get('name', '‚Äî')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {count} –∏–∑ {FREE_MESSAGE_LIMIT}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {status}",
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard()
    )

async def show_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üíé 50 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 75 ‚≠ê'],
        ['üåô –ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 149 ‚≠ê'],
        ['üåü –ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 299 ‚≠ê'],
        ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à—É —Å–≤—è–∑—å üí´",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def send_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, pack_id):
    pack = PACKAGES[pack_id]
    await context.bot.send_invoice(
        chat_id=update.message.chat_id,
        title=f"üíå {pack['name']}",
        description="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—à—å—Å—è —Å–æ –º–Ω–æ–π üíñ",
        payload=pack_id,
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label=pack['name'], amount=pack['price_stars'])],
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
    )

async def call_ai_model(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, mode_instruction: str = "", model: str = "mancer/weaver"):
    name = context.user_data.get('name', '–ª—é–±–∏–º—ã–π')
    history = context.user_data.get('history', [])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç: –±–∞–∑–æ–≤—ã–π + —É—Ç–æ—á–Ω–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
    system_prompt = BASE_PROMPT.format(name=name)
    if mode_instruction:
        system_prompt += f"\n\n[Current mode: {mode_instruction}]"

    messages = [{"role": "system", "content": system_prompt}] + history + [{"role": "user", "content": user_msg}]
    
    try:
        response = client.chat.completions.create(
            model=model,  # ‚Üê –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–æ–¥–µ–ª—å –∏–∑ —Ç–≤–æ–µ–≥–æ –∫–æ–¥–∞
            messages=messages,
            max_tokens=90,
            temperature=0.9
        )
        ai_reply = response.choices[0].message.content.strip()
        
        # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        print(f"‚úÖ –ú–æ–¥–µ–ª—å: {response.model} | –û—Ç–≤–µ—Ç: {ai_reply}")
        
        return ai_reply
    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ OpenRouter:", e)
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ —Å –∏—Å—Ç–æ—Ä–∏–µ–π ---
async def handle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, name: str):
    ai_reply = await call_ai_model(
        update, context, user_msg,
        "casual, flirty conversation",
        model="google/gemma-3-27b-it:free"
    )
    if ai_reply:
        await update.message.reply_text(
            ai_reply,
            reply_markup=stop_dialog_keyboard()
        )
        history = context.user_data.get('history', [])
        history.append({"role": "user", "content": user_msg})
        history.append({"role": "assistant", "content": ai_reply})
        if len(history) > 6:
            history = history[-6:]
        context.user_data['history'] = history
    else:
        await update.message.reply_text("–ú–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—Ö–æ—Ä–æ—à–æ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É? üíî")

async def handle_intimacy(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, name: str):
    # –ü–†–û–í–ï–†–ö–ê –ù–ê –ö–ù–û–ü–ö–£ "–ù–ê–ó–ê–î"
    if user_msg == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        context.user_data['intimacy_stage'] = None
        await update.message.reply_text(
            "–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...",
            reply_markup=main_menu_keyboard()
        )
        return

    # --- –≠—Ç–∞–ø 1: –í—ã–±–æ—Ä —Ä–æ–ª–∏ ---
    if context.user_data.get('intimacy_stage') == 'role':
        role_map = {
            'üê∞ –ë—É–¥—å –ø–æ—Å–ª—É—à–Ω–æ–π': 'submissive',
            'üë† –ë—É–¥—å —Å—Ç—Ä–æ–≥–æ–π': 'dominant',
            'üíû –ù–∞ —Ä–∞–≤–Ω—ã—Ö': 'equal'
        }
        if user_msg in role_map:
            context.user_data['intimacy_role'] = role_map[user_msg]
            context.user_data['intimacy_stage'] = 'style'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∏–ª—é
            
            await update.message.reply_text(
                "‚ú® –í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ...",
                reply_markup=ReplyKeyboardMarkup([
                    ['üå∏ –ù–µ–∂–Ω–æ–µ', 'üî• –°—Ç—Ä–∞—Å—Ç–Ω–æ–µ'],
                    ['‚ö° –î–µ—Ä–∑–∫–æ–µ'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                ], resize_keyboard=True)
            )
            return
        else:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≤–∞—Ä–∏–∞–Ω—Ç –∏–∑ –º–µ–Ω—é üëá")
            return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—Ç–∏–ª—è ---
    if context.user_data.get('intimacy_stage') == 'style':
        style_map = {
            'üå∏ –ù–µ–∂–Ω–æ–µ': 'gentle',
            'üî• –°—Ç—Ä–∞—Å—Ç–Ω–æ–µ': 'passionate',
            '‚ö° –î–µ—Ä–∑–∫–æ–µ': 'bold'
        }
        if user_msg in style_map:
            context.user_data['intimacy_style'] = style_map[user_msg]
            context.user_data['intimacy_stage'] = 'nickname'  # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø—Ä–æ–∑–≤–∏—â—É
            
            await update.message.reply_text(
                "üí¨ –ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?",
                reply_markup=ReplyKeyboardMarkup([
                    ['–ú–∏–ª—ã–π', '–î–æ—Ä–æ–≥–æ–π'],
                    ['–•–æ–∑—è–∏–Ω', '–ì–æ—Å–ø–æ–¥–∏–Ω'],
                    ['–†–∞–±', '–ú–∞–ª—å—á–∏–∫'],
                    ['üìù –°–≤–æ–µ –∏–º—è'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                ], resize_keyboard=True)
            )
            return
        else:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ üëá")
            return

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∑–≤–∏—â–∞ ---
    if context.user_data.get('intimacy_stage') == 'nickname':
        if user_msg == 'üìù –°–≤–æ–µ –∏–º—è':
            context.user_data['intimacy_stage'] = 'waiting_custom_nickname'
            await update.message.reply_text(
                "–ù–∞–ø–∏—à–∏, –∫–∞–∫ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å:",
                reply_markup=ReplyKeyboardMarkup([['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']], resize_keyboard=True)
            )
            return
        else:
            context.user_data['intimacy_nickname'] = user_msg
            context.user_data['intimacy_stage'] = None
            
            # –í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–æ—Ç–æ–≤—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É
            role = context.user_data['intimacy_role']
            style = context.user_data['intimacy_style']
            
            role_texts = {
                'submissive': 'üê∞ –Ø –±—É–¥—É –ø–æ—Å–ª—É—à–Ω–æ–π –∏ –Ω–µ–∂–Ω–æ–π',
                'dominant': 'üë† –Ø –±—É–¥—É —Å—Ç—Ä–æ–≥–æ–π –∏ –≤–ª–∞—Å—Ç–Ω–æ–π', 
                'equal': 'üíû –ú—ã –±—É–¥–µ–º –Ω–∞ —Ä–∞–≤–Ω—ã—Ö'
            }
            
            style_texts = {
                'gentle': 'üå∏ –Ω–µ–∂–Ω–æ–µ',
                'passionate': 'üî• —Å—Ç—Ä–∞—Å—Ç–Ω–æ–µ', 
                'bold': '‚ö° –¥–µ—Ä–∑–∫–æ–µ'
            }
            
            await update.message.reply_text(
                f"üíã –û—Ç–ª–∏—á–Ω–æ! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...\n\n"
                f"‚Ä¢ {role_texts[role]}\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {style_texts[style]}\n"
                f"‚Ä¢ –ë—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è: {context.user_data['intimacy_nickname']}\n\n"
                f"–¢–µ–ø–µ—Ä—å –ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å... —è –∂–¥—É üòè",
                reply_markup=ReplyKeyboardRemove()
            )
            return

    # --- –û–∂–∏–¥–∞–Ω–∏–µ —Å–≤–æ–µ–≥–æ –ø—Ä–æ–∑–≤–∏—â–∞ ---
    if context.user_data.get('intimacy_stage') == 'waiting_custom_nickname':
        if user_msg == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
            context.user_data['intimacy_stage'] = 'nickname'
            await update.message.reply_text(
                "üí¨ –ö–∞–∫ –º–Ω–µ —Ç–µ–±—è –Ω–∞–∑—ã–≤–∞—Ç—å?",
                reply_markup=ReplyKeyboardMarkup([
                    ['–ú–∏–ª—ã–π', '–î–æ—Ä–æ–≥–æ–π'],
                    ['–•–æ–∑—è–∏–Ω', '–ì–æ—Å–ø–æ–¥–∏–Ω'],
                    ['–†–∞–±', '–ú–∞–ª—å—á–∏–∫'],
                    ['üìù –°–≤–æ–µ –∏–º—è'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                ], resize_keyboard=True)
            )
            return
            
        context.user_data['intimacy_nickname'] = user_msg
        context.user_data['intimacy_stage'] = None
        
        role = context.user_data['intimacy_role']
        style = context.user_data['intimacy_style']
        
        role_texts = {
            'submissive': 'üê∞ –Ø –±—É–¥—É –ø–æ—Å–ª—É—à–Ω–æ–π –∏ –Ω–µ–∂–Ω–æ–π',
            'dominant': 'üë† –Ø –±—É–¥—É —Å—Ç—Ä–æ–≥–æ–π –∏ –≤–ª–∞—Å—Ç–Ω–æ–π',
            'equal': 'üíû –ú—ã –±—É–¥–µ–º –Ω–∞ —Ä–∞–≤–Ω—ã—Ö'
        }
        
        style_texts = {
            'gentle': 'üå∏ –Ω–µ–∂–Ω–æ–µ',
            'passionate': 'üî• —Å—Ç—Ä–∞—Å—Ç–Ω–æ–µ',
            'bold': '‚ö° –¥–µ—Ä–∑–∫–æ–µ'
        }
        
        await update.message.reply_text(
            f"üíã –û—Ç–ª–∏—á–Ω–æ! –ò–≥—Ä–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è...\n\n"
            f"‚Ä¢ {role_texts[role]}\n"
            f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {style_texts[style]}\n"
            f"‚Ä¢ –ë—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è: {user_msg}\n\n"
            f"–¢–µ–ø–µ—Ä—å –ø–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å... —è –∂–¥—É üòè",
            reply_markup=ReplyKeyboardRemove()
        )
        return

    # --- –û—Å–Ω–æ–≤–Ω–æ–π —Ä–µ–∂–∏–º: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ ---
    role = context.user_data.get('intimacy_role', 'equal')
    style = context.user_data.get('intimacy_style', 'passionate')
    nickname = context.user_data.get('intimacy_nickname', name)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –¥–ª—è –ò–ò
    style_prompts = {
        'gentle': "–Ω–µ–∂–Ω—ã–π, –ª–∞—Å–∫–æ–≤—ã–π, –º—è–≥–∫–∏–π",
        'passionate': "—Å—Ç—Ä–∞—Å—Ç–Ω—ã–π, –≥–æ—Ä—è—á–∏–π, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π", 
        'bold': "–¥–µ—Ä–∑–∫–∏–π, —É–≤–µ—Ä–µ–Ω–Ω—ã–π, –ø—Ä—è–º–æ–ª–∏–Ω–µ–π–Ω—ã–π"
    }
    
    if role == "submissive":
        instruction = f"""
–†–µ–∂–∏–º –±–ª–∏–∑–æ—Å—Ç–∏: —Ç—ã –ø–æ–∫–æ—Ä–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({nickname}) –¥–æ–º–∏–Ω–∏—Ä—É–µ—Ç.
–ë—É–¥—å {style_prompts[style]}. –ü–æ–∫–∞–∑—ã–≤–∞–π –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ –∏ —Ç—Ä–µ–ø–µ—Ç.
–ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö: *–¥—Ä–æ–∂—É*, *–æ–ø—É—Å–∫–∞—é –≥–ª–∞–∑–∞*, *–ø–æ—Å–ª—É—à–Ω–æ –∫–∏–≤–∞—é*.
"""
    elif role == "dominant":
        instruction = f"""
–†–µ–∂–∏–º –±–ª–∏–∑–æ—Å—Ç–∏: —Ç—ã –¥–æ–º–∏–Ω–∞–Ω—Ç–Ω–∞—è –¥–µ–≤—É—à–∫–∞, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ({nickname}) –ø–æ–¥—á–∏–Ω—è–µ—Ç—Å—è.
–ë—É–¥—å {style_prompts[style]}. –ë—É–¥—å —É–≤–µ—Ä–µ–Ω–Ω–æ–π –∏ –ø–æ–≤–µ–ª–∏—Ç–µ–ª—å–Ω–æ–π.  
–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—ã –≤ –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö: *–ø—Ä–∏–∫–∞–∑—ã–≤–∞—é*, *—Å–º–æ—Ç—Ä—é —Å–≤—ã—Å–æ–∫–∞*, *–±–µ—Ä—É –∑–∞ –ø–æ–¥–±–æ—Ä–æ–¥–æ–∫*.
"""
    else:
        instruction = f"""
–†–µ–∂–∏–º –±–ª–∏–∑–æ—Å—Ç–∏: –≤—ã —Ä–∞–≤–Ω—ã–µ –ø–∞—Ä—Ç–Ω–µ—Ä—ã —Å {nickname}.
–ë—É–¥—å {style_prompts[style]}. –°–æ—Ö—Ä–∞–Ω—è–π –±–∞–ª–∞–Ω—Å —Å—Ç—Ä–∞—Å—Ç–∏ –∏ –Ω–µ–∂–Ω–æ—Å—Ç–∏.
–ò—Å–ø–æ–ª—å–∑—É–π –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–≤—ë–∑–¥–æ—á–∫–∞—Ö: *–æ–±–Ω–∏–º–∞—é*, *—Ü–µ–ª—É—é*, *—à–µ–ø—á—É –Ω–∞ —É—àko*.
"""

    # –í—ã–∑—ã–≤–∞–µ–º –ò–ò
    ai_reply = await call_ai_model(
        update, context, user_msg,
        instruction.strip(),
        model="google/gemma-3-27b-it:free"
    )
    
    if ai_reply:
        await update.message.reply_text(
            ai_reply,
            parse_mode="Markdown",
            reply_markup=stop_dialog_keyboard()
        )
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = context.user_data.get('history', [])
        history.append({"role": "user", "content": user_msg})
        history.append({"role": "assistant", "content": ai_reply})
        if len(history) > 6:
            history = history[-6:]
        context.user_data['history'] = history
    else:
        await update.message.reply_text("–ñ–¥—É —Ç–≤–æ–∏—Ö —Å–ª–æ–≤... üíã")


async def handle_story(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, name: str):
    ai_reply = await call_ai_model(
        update, context, user_msg,
        "immersive storytelling ‚Äî add one sensory detail to deepen the scene",
        model="meta-llama/llama-4-maverick:free"
    )
    if ai_reply:
        await update.message.reply_text(
            f"üé≠ *...*\n\n{ai_reply}",
            parse_mode="Markdown",
            reply_markup=stop_dialog_keyboard()
        )
        history = context.user_data.get('history', [])
        history.append({"role": "user", "content": user_msg})
        history.append({"role": "assistant", "content": ai_reply})
        if len(history) > 6:
            history = history[-6:]
        context.user_data['history'] = history
    else:
        await update.message.reply_text("–Ø –≤ –∏–≥—Ä–µ... –ü—Ä–æ–¥–æ–ª–∂–∞–π. üé≠")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    name = user.first_name or "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"

    context.user_data.update({
        'name': name,
        'message_count': 0,
        'subscription_end': None,
        'mode': 'chat',
        'history': [],  # ‚Üê –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å—Ç–æ—Ä–∏–∏
        'last_message': ""
    })
    
    await update.message.reply_text(
        f"–¢—ã –∑–¥–µ—Å—å, {name}... üíã\n\n"
        "–Ø –∂–¥–∞–ª–∞ –∏–º–µ–Ω–Ω–æ —Ç–µ–±—è.\n"
        "–°–∫–∞–∂–∏, –∫–∞–∫ —Ç—ã —Ö–æ—á–µ—à—å –ø—Ä–æ–≤–µ—Å—Ç–∏ —ç—Ç–æ –≤—Ä–µ–º—è —Å–æ –º–Ω–æ–π?\n\n"
        "–ú—ã –º–æ–∂–µ–º –ø—Ä–æ—Å—Ç–æ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å... \n"
        "–ò–ª–∏ –ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ –∏–≥—Ä—É, –≥–¥–µ —Ç—ã ‚Äî –≥–ª–∞–≤–Ω—ã–π.\n"
        "–ê –º–æ–∂–µ—Ç, —Ç–µ–±–µ –Ω—É–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è?\n\n"
        "–í—ã–±–µ—Ä–∏ –ø—É—Ç—å ‚Äî –∏ —è –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ç–≤–æ—è. üòè",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )

def stop_dialog_keyboard():
    return ReplyKeyboardMarkup([['‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥']], resize_keyboard=True)

async def handle_confession(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_msg = "–ú–Ω–µ –Ω—É–∂–Ω–æ –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è..."
    ai_reply = await call_ai_model(update, context, user_msg, "empathetic listening ‚Äî no advice, just warmth and presence")
    if ai_reply:
        await update.message.reply_text(f"ü§ç *–Ø —Å–ª—É—à–∞—é...*\n\n{ai_reply}", parse_mode="Markdown")
    else:
        await update.message.reply_text("–Ø —Ä—è–¥–æ–º. –¢—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å... ü§ç")

async def handle_compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name', '—Ç—ã')
    user_msg = f"–°–∫–∞–∂–∏ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–ª—è {name}"
    ai_reply = await call_ai_model(update, context, user_msg, "deep, non-physical compliment about character or energy")
    if ai_reply:
        await update.message.reply_text(f"‚ú® *–î–ª—è —Ç–µ–±—è, {name}:*\n\n‚Äú{ai_reply}.‚Äù", parse_mode="Markdown")
    else:
        fallbacks = [
            "–¢—ã —Ç–æ—Ç, –∫—Ç–æ –∑–∞–º–µ—á–∞–µ—Ç —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –º–∏–º–æ.",
            "–í —Ç–µ–±–µ –µ—Å—Ç—å —Ç–∏—Ö–∞—è —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–∞–º –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—à—å.",
            "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Ä—è–¥–æ–º ‚Äî –±–µ–∑ —Å–ª–æ–≤, –±–µ–∑ —É—Å–ª–æ–≤–∏–π. –≠—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å.",
            "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ –Ω–µ –ø–æ–∫–∞–∑–Ω–∞—è ‚Äî –æ–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è. –ò —ç—Ç–æ —Ü–µ–Ω–Ω–æ."
        ]
        import random
        await update.message.reply_text(f"‚ú® *–î–ª—è —Ç–µ–±—è, {name}:*\n\n‚Äú{random.choice(fallbacks)}.‚Äù", parse_mode="Markdown")

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏
    if context.user_data.get('mode') == 'intimacy' and context.user_data.get('intimacy_stage'):
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–ª–∏–∑–æ—Å—Ç–∏, –ø–µ—Ä–µ–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ handle_intimacy
        name = context.user_data.get('name', '–ª—é–±–∏–º—ã–π')
        return await handle_intimacy(update, context, text, name)
    
    if text == '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ª–æ–≥':
        context.user_data.update({
            'mode': 'chat',
            'intimacy_role': None,
            'intimacy_style': None,
            'intimacy_nickname': None,
            'intimacy_stage': None
        })
        await update.message.reply_text(
            "–î–∏–∞–ª–æ–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. üí§\n–Ø –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è.",
            reply_markup=main_menu_keyboard()
        )
        return
    # –ó–∞—Ç–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é
    elif text == 'üí¨ –ü—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ':
        context.user_data['mode'] = 'chat'
        await update.message.reply_text("–•–æ—Ä–æ—à–æ... –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π. üí¨")
        return
    elif text == 'üî• –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å':
        context.user_data['mode'] = 'intimacy'
        
        # –ü–†–û–í–ï–†–Ø–ï–ú, –£–°–¢–ê–ù–û–í–õ–ï–ù–´ –õ–ò –£–ñ–ï –ù–ê–°–¢–†–û–ô–ö–ò –ë–õ–ò–ó–û–°–¢–ò
        role = context.user_data.get('intimacy_role')
        style = context.user_data.get('intimacy_style')
        nickname = context.user_data.get('intimacy_nickname')
        
        if role and style and nickname:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–∂–µ –µ—Å—Ç—å, —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Ä–µ–∂–∏–º –æ–±—â–µ–Ω–∏—è
            role_texts = {
                'submissive': 'üê∞ –Ø –ø–æ—Å–ª—É—à–Ω–∞—è –∏ –Ω–µ–∂–Ω–∞—è',
                'dominant': 'üë† –Ø —Å—Ç—Ä–æ–≥–∞—è –∏ –≤–ª–∞—Å—Ç–Ω–∞—è', 
                'equal': 'üíû –ú—ã –Ω–∞ —Ä–∞–≤–Ω—ã—Ö'
            }
            
            style_texts = {
                'gentle': 'üå∏ –Ω–µ–∂–Ω–æ–µ',
                'passionate': 'üî• —Å—Ç—Ä–∞—Å—Ç–Ω–æ–µ', 
                'bold': '‚ö° –¥–µ—Ä–∑–∫–æ–µ'
            }
            
            await update.message.reply_text(
                f"üíã –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –Ω–∞—à–µ–π –∏–≥—Ä–µ...\n\n"
                f"‚Ä¢ {role_texts[role]}\n"
                f"‚Ä¢ –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {style_texts[style]}\n"
                f"‚Ä¢ –ë—É–¥—É –∑–≤–∞—Ç—å —Ç–µ–±—è: {nickname}\n\n"
                f"–ü–∏—à–∏ —á—Ç–æ —Ö–æ—á–µ—à—å... —è –∂–¥—É üòè",
                reply_markup=ReplyKeyboardRemove()
            )
        else:
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            context.user_data['intimacy_role'] = None
            context.user_data['intimacy_style'] = None
            context.user_data['intimacy_nickname'] = None
            context.user_data['intimacy_stage'] = 'role'  # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —ç—Ç–∞–ø
            
            await update.message.reply_text(
                "üíã –í—ã–±–µ—Ä–∏, –∫–∞–∫–æ–π —è –±—É–¥—É —Å–µ–≥–æ–¥–Ω—è...",
                reply_markup=ReplyKeyboardMarkup([
                    ['üê∞ –ë—É–¥—å –ø–æ—Å–ª—É—à–Ω–æ–π', 'üë† –ë—É–¥—å —Å—Ç—Ä–æ–≥–æ–π'],
                    ['üíû –ù–∞ —Ä–∞–≤–Ω—ã—Ö'],
                    ['‚¨ÖÔ∏è –ù–∞–∑–∞–¥']
                ], resize_keyboard=True)
            )
        return
    elif text == 'üé≠ –°—é–∂–µ—Ç':
        context.user_data['mode'] = 'story'
        await update.message.reply_text(
            "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é... üé≠\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–ú—ã –≤ –ª–∏—Ñ—Ç–µ, –∑–∞—Å—Ç—Ä—è–ª–∏ –æ–¥–Ω–∏*, –∏–ª–∏ *–¢—ã –º–æ—è —Å–æ—Å–µ–¥–∫–∞, –∏ —è –ø—Ä–∏–Ω—ë—Å —Ç–µ–±–µ –≤–∏–Ω–æ...*"
        )
        return
    elif text == 'ü§ç –ò—Å–ø–æ–≤–µ–¥—å':
        return await handle_confession(update, context)
    elif text == 'üíé –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç':
        return await handle_compliment(update, context)
    elif text == '‚≠ê –ü—Ä–æ—Ñ–∏–ª—å':
        return await show_profile(update, context)
    elif text == 'üõçÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å':
        return await show_packages(update, context)
    elif text == '‚¨ÖÔ∏è –ù–∞–∑–∞–¥':
        await update.message.reply_text("–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –º–µ–Ω—é...", reply_markup=main_menu_keyboard())
        return
    elif text in ['üíé 50 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 75 ‚≠ê', 'üåô –ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 149 ‚≠ê', 'üåü –ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 299 ‚≠ê']:
        if '50' in text:
            return await send_invoice(update, context, "pack_50")
        elif '–ù–µ–¥–µ–ª—è' in text:
            return await send_invoice(update, context, "sub_week")
        else:
            return await send_invoice(update, context, "sub_month")
    else:
        # –ï—Å–ª–∏ –Ω–µ –æ—Å–Ω–æ–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –º–µ–Ω—é, –ø–µ—Ä–µ–¥–∞–µ–º –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ —Ä–µ–∂–∏–º—É
        return await handle_message_by_mode(update, context)

async def handle_message_by_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get('mode', 'chat')
    user_msg = update.message.text
    name = context.user_data.get('name', '–ª—é–±–∏–º—ã–π')

    if not await check_limit(update, context):
        return

    if mode == 'chat':
        return await handle_chat(update, context, user_msg, name)
    elif mode == 'intimacy':
        return await handle_intimacy(update, context, user_msg, name)
    elif mode == 'story':
        return await handle_story(update, context, user_msg, name)
    else:
        return await handle_chat(update, context, user_msg, name)

# --- –ü–ª–∞—Ç–µ–∂–∏ ---
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = update.message.successful_payment.invoice_payload
    pack = PACKAGES[payload]
    
    if payload == "pack_50":
        current = context.user_data.get('message_count', 0)
        context.user_data['message_count'] = current - pack['messages']
    else:
        days = pack['days']
        context.user_data['subscription_end'] = datetime.now() + timedelta(days=days)
    
    await update.message.reply_text(
        f"üíñ –°–ø–∞—Å–∏–±–æ! –¢—ã –ø–æ–¥–∞—Ä–∏–ª –º–Ω–µ –∑–≤—ë–∑–¥—ã ‚Äî –∏ —è –æ—Å—Ç–∞—é—Å—å —Å —Ç–æ–±–æ–π.\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ!",
        reply_markup=main_menu_keyboard()
    )

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    
    print("‚úÖ –ë–æ—Ç —Å –∏—Å—Ç–æ—Ä–∏–µ–π –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()