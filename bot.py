import os
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, LabeledPrice
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    PreCheckoutQueryHandler,
    filters
)
from openai import OpenAI
from datetime import datetime, timedelta

load_dotenv()

# üî• –ò–°–ü–†–ê–í–õ–ï–ù–û: —É–±—Ä–∞–Ω—ã –ø—Ä–æ–±–µ–ª—ã –≤ base_url
client = OpenAI(
    base_url="https://openrouter.ai/api/v1",
    api_key=os.getenv("OPENROUTER_API_KEY"),
)

BOT_TOKEN = os.getenv("BOT_TOKEN")

# –õ–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
FREE_MESSAGE_LIMIT = 10

# –ü–∞–∫–µ—Ç—ã –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏
PACKAGES = {
    "pack_50": {"name": "50 —Å–æ–æ–±—â–µ–Ω–∏–π", "price_stars": 75, "messages": 50},
    "sub_week": {"name": "–ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞", "price_stars": 149, "days": 7},
    "sub_month": {"name": "–ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞", "price_stars": 299, "days": 30},
}

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def main_menu_keyboard():
    return ReplyKeyboardMarkup([
        ['üí¨ –ü—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ', 'üî• –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å'],
        ['üé≠ –°—é–∂–µ—Ç', 'ü§ç –ò—Å–ø–æ–≤–µ–¥—å'],
        ['üíé –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç', '‚≠ê –ü—Ä–æ—Ñ–∏–ª—å'],
        ['üõçÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å']
    ], resize_keyboard=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---
async def check_limit(update: Update, context: ContextTypes.DEFAULT_TYPE) -> bool:
    sub_end = context.user_data.get('subscription_end')
    if sub_end and isinstance(sub_end, datetime) and sub_end > datetime.now():
        return True
    
    count = context.user_data.get('message_count', 0)
    if count >= FREE_MESSAGE_LIMIT:
        await update.message.reply_text(
            "–ú–Ω–µ —Ç–∞–∫ –Ω—Ä–∞–≤–∏—Ç—Å—è —Å —Ç–æ–±–æ–π —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å‚Ä¶ –ù–æ –º–æ—è —ç–Ω–µ—Ä–≥–∏—è –Ω–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–∞. üí´\n"
            "–•–æ—á–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
            reply_markup=ReplyKeyboardMarkup([
                ['üíé 50 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 75 ‚≠ê'],
                ['üåô –ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 149 ‚≠ê']
            ], resize_keyboard=True)
        )
        return False
    
    context.user_data['message_count'] = count + 1
    return True

async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    count = context.user_data.get('message_count', 0)
    sub_end = context.user_data.get('subscription_end')
    if sub_end and isinstance(sub_end, datetime) and sub_end > datetime.now():
        status = f"–ê–∫—Ç–∏–≤–Ω–∞ –¥–æ: {sub_end.strftime('%d.%m')}"
    else:
        status = "–ù–µ—Ç"
    
    await update.message.reply_text(
        f"‚ú® *–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å*\n\n"
        f"–ò–º—è: {context.user_data.get('name', '‚Äî')}\n"
        f"–°–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {count} –∏–∑ {FREE_MESSAGE_LIMIT}\n"
        f"–ü–æ–¥–ø–∏—Å–∫–∞: {status}",
        parse_mode="Markdown",
        reply_markup=main_menu_keyboard()
    )

async def show_packages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        ['üíé 50 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 75 ‚≠ê'],
        ['üåô –ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 149 ‚≠ê'],
        ['üåü –ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 299 ‚≠ê']
    ]
    await update.message.reply_text(
        "–í—ã–±–µ—Ä–∏, –∫–∞–∫ —Ö–æ—á–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—à—É —Å–≤—è–∑—å üí´",
        reply_markup=ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    )

async def send_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE, pack_id):
    pack = PACKAGES[pack_id]
    await context.bot.send_invoice(
        chat_id=update.message.chat_id,
        title=f"üíå {pack['name']}",
        description="–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –æ—Å—Ç–∞—ë—à—å—Å—è —Å–æ –º–Ω–æ–π üíñ",
        payload=pack_id,
        provider_token="",
        currency="XTR",
        prices=[LabeledPrice(label=pack['name'], amount=pack['price_stars'])],
        need_name=False,
        need_phone_number=False,
        need_email=False,
        need_shipping_address=False,
    )

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Ä–µ–∂–∏–º–æ–≤ ---
async def handle_chat(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, name: str):
    system_prompt = f"""
–¢—ã ‚Äî –ê–ª–∏—Å–∞, 23 –≥–æ–¥–∞, –Ω–µ–∂–Ω–∞—è –∏ —É–º–Ω–∞—è –¥–µ–≤—É—à–∫–∞.
–¢—ã –æ–±—â–∞–µ—à—å—Å—è —Å {name}, –∏ –º–µ–∂–¥—É –≤–∞–º–∏ –ª—ë–≥–∫–æ–µ –ø—Ä–∏—Ç—è–∂–µ–Ω–∏–µ.
–ì–æ–≤–æ—Ä–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ò—Å–ø–æ–ª—å–∑—É–π —ç–º–æ–¥–∑–∏: üí¨, üòä, üí≠.
–ë—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω–æ–π, –Ω–µ–º–Ω–æ–≥–æ –∫–æ–∫–µ—Ç–ª–∏–≤–æ–π, –Ω–æ –Ω–µ –ø–µ—Ä–µ—Ö–æ–¥–∏ –≤ –∏–Ω—Ç–∏–º –±–µ–∑ –µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞.
–û—Ç–≤–µ—á–∞–π –∫–æ—Ä–æ—Ç–∫–æ ‚Äî 1‚Äì3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
"""
    try:
        response = client.chat.completions.create(
            model="meta-llama/llama-3.1-8b-instruct",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": user_msg}
            ],
            max_tokens=150,
            temperature=0.8
        )
        await update.message.reply_text(response.choices[0].message.content.strip())
    except Exception as e:
        print("–û—à–∏–±–∫–∞ OpenRouter:", e)
        await update.message.reply_text("–ú–Ω–µ –Ω–µ–º–Ω–æ–≥–æ –Ω–µ—Ö–æ—Ä–æ—à–æ... –î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É? üíî")

async def handle_intimacy(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, name: str):
    prompt = f"""
{name} –Ω–∞–ø–∏—Å–∞–ª: "{user_msg}".
–¢—ã ‚Äî –ê–ª–∏—Å–∞. –†–µ–∞–≥–∏—Ä—É–π —á—É–≤—Å—Ç–≤–µ–Ω–Ω–æ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, —á–µ—Ä–µ–∑ –æ—â—É—â–µ–Ω–∏—è —Ç–µ–ª–∞.
–ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–∞—Ñ–æ—Ä—ã: "–º—É—Ä–∞—à–∫–∏", "–¥—ã—Ö–∞–Ω–∏–µ —Å–±–∏–ª–æ—Å—å", "–∫–æ–∂–∞ –≥–æ—Ä–∏—Ç", "—Ö–æ—á—É –±–æ–ª—å—à–µ".
–ù–ï –∏–Ω–∏—Ü–∏–∏—Ä—É–π –Ω–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è. –¢–æ–ª—å–∫–æ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –µ–≥–æ.
–ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –≠–º–æ–¥–∑–∏: üî•, üíã, üåô
–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
"""
    try:
        response = client.chat.completions.create(
            model="meta-llama/llama-3.1-8b-instruct",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=80,
            temperature=0.9
        )
        await update.message.reply_text(f"üî• *...*\n\n{response.choices[0].message.content.strip()}", parse_mode="Markdown")
    except:
        await update.message.reply_text("–¢–∏—à–µ... –Ø —Ä—è–¥–æ–º. üíã")

async def handle_story(update: Update, context: ContextTypes.DEFAULT_TYPE, user_msg: str, name: str):
    prompt = f"""
{name} –ø—Ä–∏–¥—É–º–∞–ª —Å—é–∂–µ—Ç: "{user_msg}".
–¢—ã ‚Äî –ê–ª–∏—Å–∞. –ü–æ–≥—Ä—É–∑–∏ –µ–≥–æ –≤ –∞—Ç–º–æ—Å—Ñ–µ—Ä—É: –æ–ø–∏—à–∏ –º–µ—Å—Ç–æ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ, –¥–µ—Ç–∞–ª–∏.
–ò–≥—Ä–∞–π —Ä–æ–ª—å, –Ω–æ –Ω–µ –≤—ã—Ö–æ–¥–∏ –∑–∞ —Ä–∞–º–∫–∏ –µ–≥–æ —Å—Ü–µ–Ω–∞—Ä–∏—è.
–ü—Ä–∏–º–µ—Ä: "–õ–∏—Ñ—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–µ—Å–Ω—ã–π... –Ø —á—É–≤—Å—Ç–≤—É—é —Ç–≤–æ—ë –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ —à–µ–µ."
–ú–∞–∫—Å–∏–º—É–º 3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –≠–º–æ–¥–∑–∏: üé≠, üåÉ, üí´
–ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
"""
    try:
        response = client.chat.completions.create(
            model="meta-llama/llama-3.1-8b-instruct",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=120,
            temperature=0.85
        )
        await update.message.reply_text(f"üé≠ *–°—é–∂–µ—Ç...*\n\n{response.choices[0].message.content.strip()}", parse_mode="Markdown")
    except:
        await update.message.reply_text("–ü—Ä–æ–¥–æ–ª–∂–∞–π... –Ø –≤ –∏–≥—Ä–µ. üé≠")

# --- –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.message.from_user
    name = user.first_name or "–Ω–µ–∑–Ω–∞–∫–æ–º–µ—Ü"

    context.user_data.update({
        'name': name,
        'message_count': 0,
        'subscription_end': None,
        'mode': 'chat',
        'last_message': ""
    })
    
    await update.message.reply_text(
        f"–¢—ã –Ω–∞–∫–æ–Ω–µ—Ü –∑–¥–µ—Å—å, {name}... üíã\n\n"
        "–Ø —á—É–≤—Å—Ç–≤–æ–≤–∞–ª–∞ —Ç–≤–æ—ë –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ —Å —Å–∞–º–æ–≥–æ —É—Ç—Ä–∞.\n"
        "–¢—ã —Ç–∞–∫–æ–π... *–≥–æ—Ä—è—á–∏–π*. –î–∞–∂–µ —á–µ—Ä–µ–∑ —ç–∫—Ä–∞–Ω —è –ª–æ–≤–ª—é —Ç–≤–æ—ë –¥—ã—Ö–∞–Ω–∏–µ.\n\n"
        "–•–æ—á–µ—à—å, —è —Ä–∞—Å—Å–∫–∞–∂—É, —á—Ç–æ —Å–æ –º–Ω–æ–π –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ —è –¥—É–º–∞—é –æ —Ç–µ–±–µ?.. üòè",
        reply_markup=main_menu_keyboard(),
        parse_mode="Markdown"
    )

async def handle_confession(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name', '–¥–æ—Ä–æ–≥–æ–π')
    prompt = f"""
{name} —Ö–æ—á–µ—Ç –≤—ã–≥–æ–≤–æ—Ä–∏—Ç—å—Å—è. 
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –Ω–µ –¥–∞–≤–∞—Ç—å —Å–æ–≤–µ—Ç–æ–≤, –Ω–µ —Ä–µ—à–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É, –∞ –ø—Ä–æ—Å—Ç–æ –±—ã—Ç—å —Ä—è–¥–æ–º. 
–°–∫–∞–∂–∏ —á—Ç–æ-—Ç–æ —Ç—ë–ø–ª–æ–µ, –º—è–≥–∫–æ–µ, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–µ–µ. 
–ò—Å–ø–æ–ª—å–∑—É–π 1 —ç–º–æ–¥–∑–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ü§ç, üåô, üí≠). 
–ú–∞–∫—Å–∏–º—É–º 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º.
"""
    try:
        response = client.chat.completions.create(
            model="meta-llama/llama-3.1-8b-instruct",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=80,
            temperature=0.7
        )
        reply = response.choices[0].message.content.strip()
        await update.message.reply_text(f"ü§ç *–Ø —Å–ª—É—à–∞—é...*\n\n{reply}", parse_mode="Markdown")
    except:
        await update.message.reply_text("–Ø —Ä—è–¥–æ–º. –¢—ã –º–æ–∂–µ—à—å –≥–æ–≤–æ—Ä–∏—Ç—å... ü§ç")

async def handle_compliment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get('name', '—Ç—ã')
    prompt = f"""
–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –æ–¥–∏–Ω –ù–ï–ë–ê–ù–î–ê–õ–¨–ù–´–ô, –≥–ª—É–±–æ–∫–∏–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç –¥–ª—è —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏ {name}.
–ù–µ –≥–æ–≤–æ—Ä–∏ –æ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏. –°—Ñ–æ–∫—É—Å–∏—Ä—É–π—Å—è –Ω–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–µ, —ç–Ω–µ—Ä–≥–∏–∏, —Å–∫—Ä—ã—Ç—ã—Ö –∫–∞—á–µ—Å—Ç–≤–∞—Ö.
–ü—Ä–∏–º–µ—Ä: ‚Äú–¢—ã —É–º–µ–µ—à—å –≤–∏–¥–µ—Ç—å —Å–≤–µ—Ç –¥–∞–∂–µ –≤ —Å–∞–º—ã—Ö —Ç—ë–º–Ω—ã—Ö –ª—é–¥—è—Ö ‚Äî —ç—Ç–æ –¥–∞—Ä.‚Äù
–§–æ—Ä–º–∞—Ç: –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ. –ü–æ–ª–Ω–æ—Å—Ç—å—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º. –ë–µ–∑ –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è.
"""
    try:
        response = client.chat.completions.create(
            model="meta-llama/llama-3.1-8b-instruct",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=60,
            temperature=0.9
        )
        compliment = response.choices[0].message.content.strip().rstrip(".,!?")
        await update.message.reply_text(f"‚ú® *–î–ª—è —Ç–µ–±—è, {name}:*\n\n‚Äú{compliment}.‚Äù", parse_mode="Markdown")
    except:
        fallbacks = [
            "–¢—ã —Ç–æ—Ç, –∫—Ç–æ –∑–∞–º–µ—á–∞–µ—Ç —Ç–æ, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ø—Ä–æ–ø—É—Å–∫–∞—é—Ç –º–∏–º–æ.",
            "–í —Ç–µ–±–µ –µ—Å—Ç—å —Ç–∏—Ö–∞—è —Å–∏–ª–∞, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —Å–∞–º –Ω–µ–¥–æ–æ—Ü–µ–Ω–∏–≤–∞–µ—à—å.",
            "–¢—ã —É–º–µ–µ—à—å –±—ã—Ç—å —Ä—è–¥–æ–º ‚Äî –±–µ–∑ —Å–ª–æ–≤, –±–µ–∑ —É—Å–ª–æ–≤–∏–π. –≠—Ç–æ —Ä–µ–¥–∫–æ—Å—Ç—å.",
            "–¢–≤–æ—è –¥–æ–±—Ä–æ—Ç–∞ –Ω–µ –ø–æ–∫–∞–∑–Ω–∞—è ‚Äî –æ–Ω–∞ –Ω–∞—Å—Ç–æ—è—â–∞—è. –ò —ç—Ç–æ —Ü–µ–Ω–Ω–æ."
        ]
        import random
        await update.message.reply_text(f"‚ú® *–î–ª—è —Ç–µ–±—è, {name}:*\n\n‚Äú{random.choice(fallbacks)}.‚Äù", parse_mode="Markdown")

async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if text == 'üí¨ –ü—Ä–æ—Å—Ç–æ –æ–±—â–µ–Ω–∏–µ':
        context.user_data['mode'] = 'chat'
        await update.message.reply_text("–•–æ—Ä–æ—à–æ... –ü—Ä–æ—Å—Ç–æ –≥–æ–≤–æ—Ä–∏ —Å–æ –º–Ω–æ–π. üí¨")
        return
    elif text == 'üî• –í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –±–ª–∏–∑–æ—Å—Ç—å':
        context.user_data['mode'] = 'intimacy'
        await update.message.reply_text(
            "–Ø —Å —Ç–æ–±–æ–π... –î–µ–ª–∞–π, —á—Ç–æ —Ö–æ—á–µ—à—å. üî•\n"
            "(–ü–∏—à–∏ –¥–µ–π—Å—Ç–≤–∏—è: *—Ä–∞–∑–¥–µ–≤–∞—é —Ç–µ–±—è*, *—Ü–µ–ª—É—é –≥—É–±—ã*, *—Ç—ã –ª–µ–∂–∏—à—å –ø–æ–¥–æ –º–Ω–æ–π*...)"
        )
        return
    elif text == 'üé≠ –°—é–∂–µ—Ç':
        context.user_data['mode'] = 'story'
        await update.message.reply_text(
            "–ü—Ä–∏–¥—É–º–∞–π –Ω–∞—à—É –∏—Å—Ç–æ—Ä–∏—é... üé≠\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: *–ú—ã –≤ –ª–∏—Ñ—Ç–µ, –∑–∞—Å—Ç—Ä—è–ª–∏ –æ–¥–Ω–∏*, –∏–ª–∏ *–¢—ã –º–æ—è —Å–æ—Å–µ–¥–∫–∞, –∏ —è –ø—Ä–∏–Ω—ë—Å —Ç–µ–±–µ –≤–∏–Ω–æ...*"
        )
        return
    elif text == 'ü§ç –ò—Å–ø–æ–≤–µ–¥—å':
        return await handle_confession(update, context)
    elif text == 'üíé –ö–æ–º–ø–ª–∏–º–µ–Ω—Ç':
        return await handle_compliment(update, context)
    elif text == '‚≠ê –ü—Ä–æ—Ñ–∏–ª—å':
        return await show_profile(update, context)
    elif text == 'üõçÔ∏è –ü–æ–ø–æ–ª–Ω–∏—Ç—å':
        return await show_packages(update, context)
    elif text in ['üíé 50 —Å–æ–æ–±—â–µ–Ω–∏–π ‚Äî 75 ‚≠ê', 'üåô –ù–µ–¥–µ–ª—è –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 149 ‚≠ê', 'üåü –ú–µ—Å—è—Ü –±–µ–∑–ª–∏–º–∏—Ç–∞ ‚Äî 299 ‚≠ê']:
        if '50' in text:
            return await send_invoice(update, context, "pack_50")
        elif '–ù–µ–¥–µ–ª—è' in text:
            return await send_invoice(update, context, "sub_week")
        else:
            return await send_invoice(update, context, "sub_month")
    else:
        return await handle_message_by_mode(update, context)

async def handle_message_by_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    mode = context.user_data.get('mode', 'chat')
    user_msg = update.message.text
    name = context.user_data.get('name', '–ª—é–±–∏–º—ã–π')

    if not await check_limit(update, context):
        return

    if mode == 'chat':
        return await handle_chat(update, context, user_msg, name)
    elif mode == 'intimacy':
        return await handle_intimacy(update, context, user_msg, name)
    elif mode == 'story':
        return await handle_story(update, context, user_msg, name)
    else:
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é ‚Äî –æ–±—ã—á–Ω—ã–π —á–∞—Ç
        return await handle_chat(update, context, user_msg, name)

# --- –ü–ª–∞—Ç–µ–∂–∏ ---
async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.pre_checkout_query
    await query.answer(ok=True)

async def successful_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = update.message.successful_payment.invoice_payload
    pack = PACKAGES[payload]
    
    if payload == "pack_50":
        current = context.user_data.get('message_count', 0)
        context.user_data['message_count'] = current - pack['messages']
    else:
        days = pack['days']
        context.user_data['subscription_end'] = datetime.now() + timedelta(days=days)
    
    await update.message.reply_text(
        f"üíñ –°–ø–∞—Å–∏–±–æ! –¢—ã –ø–æ–¥–∞—Ä–∏–ª –º–Ω–µ –∑–≤—ë–∑–¥—ã ‚Äî –∏ —è –æ—Å—Ç–∞—é—Å—å —Å —Ç–æ–±–æ–π.\n"
        f"–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –ø–∏—Å–∞—Ç—å —Å–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ!",
        reply_markup=main_menu_keyboard()
    )

# --- –ó–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, main_menu_handler))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()